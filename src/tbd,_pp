u

class scenariolister : public scenariocallback<double>
{
public:
    virtual void callback(
                   const tree* t,
                   const path& p)
    {
        const scenario<Xi>& s =
                (dynamic_cast<const scenario<Xi>*>(t));
        history<Xi> xi = s.x().h(p);

        std::cout << k << " " << h[k] << " " << ph[k] << std::endl;
    }
};



class shiftedtree: public tree
{
public:
    shiftedtree(const tree_ptr& t): ft(t) {}
    virtual unsigned int depth() const { return ft->depth()+1; }

    static path orig(const path& src)
    {
        path dst(src.size()-1);
        for(unsigned int i=0; i<dst.size(); i++)
            dst[i] = src[i+1];
        return dst;
    }

    virtual unsigned int numbranches(const path& ap) const
    {
        if(ap.size()==0)
            return 1;
        else
            return ft->numbranches(orig(ap));
    }
private:
    const tree_ptr& ft;
};

using shiftedtree_ptr = std::shared_ptr<shiftedtree>;

template<typename Xi>
class shiftedscenario
{
public:
    shiftedscenario(const scenario_ptr<Xi>& orig, const Xi& xi0 = 0)
      : forig(orig), fst(new shiftedtree(orig->p().t_ptr())), fxi0(xi0)
    {
    }
    virtual history<Xi> h(const path& p) const
    {
        history<Xi> r = forig->x().h(shiftedtree::orig(p));
        r.insert(r.begin(),fxi0);
        return r;
    }
    virtual prob uncprob(const path& p)
    {
        return forig->p().uncprob(shiftedtree::orig(p));
    }

    const shiftedtree_ptr& st() { return fst; }
private:
    scenario_ptr<Xi> forig;
    shiftedtree_ptr fst;
    Xi fxi0;
};

template<typename Xi>
using shiftedscenario_ptr = std::shared_ptr<shiftedscenario<Xi>>;



